"use client";

import { useEffect, useState, useRef } from "react";
import { useRouter } from "next/navigation";
import {
  getAboutData,
  updateAboutData,
  saveDraft,
  getDraft,
} from "@/app/services/aboutService";
import useAuthUser from "@/app/hooks/useAuthUser";
import useTranslation from "@/app/hooks/useTranslations";
import TextareaAutosize from "react-textarea-autosize";
import { useEditor, EditorContent } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import Image from "@tiptap/extension-image";
import TextStyle from "@tiptap/extension-text-style";
import { FontSize } from "@/components/FontSize";
import EditorToolbar from "@/components/EditorToolbar";
import mammoth from "mammoth";
import debounce from "lodash/debounce";

export default function EditAboutPage() {
  const { user, loading } = useAuthUser();
  const router = useRouter();
  const [form, setForm] = useState({
    _id: null,
    title: { vi: "", jp: "" },
    excerpt: { vi: "", jp: "" },
    image: "",
    content: {
      vi: { type: "doc", content: [] },
      jp: { type: "doc", content: [] },
    },
    isDraft: false,
  });
  const [saving, setSaving] = useState(false);
  const [isDraftSaving, setIsDraftSaving] = useState(false);
  const [fetching, setFetching] = useState(true);
  const translations = useTranslation();
  const t = translations?.EditAbout || {};

  // Khởi tạo Tiptap editors cho nội dung tiếng Việt và tiếng Nhật
  const editorVi = useEditor({
    extensions: [
      StarterKit,
      Image.configure({ inline: true, allowBase64: true }),
      TextStyle,
      FontSize,
    ],
    content: form.content.vi,
    immediatelyRender: false,
    onUpdate: ({ editor }) => {
      const json = editor.getJSON();
      setForm((prev) => ({
        ...prev,
        content: { ...prev.content, vi: json },
      }));
    },
  });

  const editorJp = useEditor({
    extensions: [
      StarterKit,
      Image.configure({ inline: true, allowBase64: true }),
      TextStyle,
      FontSize,
    ],
    content: form.content.jp,
    immediatelyRender: false,
    onUpdate: ({ editor }) => {
      const json = editor.getJSON();
      setForm((prev) => ({
        ...prev,
        content: { ...prev.content, jp: json },
      }));
    },
  });

  // Hàm debounced để lưu bản nháp
  const debouncedSaveDraft = useRef(
    debounce(async (data) => {
      if (isDraftSaving) return;
      if (!data.title.vi || !data.excerpt.vi || !data.content.vi) {
        return; // Không lưu nếu thiếu dữ liệu bắt buộc
      }
      setIsDraftSaving(true);
      try {
        const payload = {
          ...data,
          isDraft: true,
        };
        if (data._id) payload._id = data._id;
        const saved = await saveDraft(payload);
        setForm((prev) => ({ ...prev, _id: saved._id }));
        console.log("Đã lưu bản nháp tự động");
      } catch (err) {
        console.warn("❌ Lưu bản nháp thất bại:", err.message);
      } finally {
        setIsDraftSaving(false);
      }
    }, 2000)
  ).current;

  // Lấy dữ liệu AboutMe hoặc bản nháp
  useEffect(() => {
    const fetch = async () => {
      try {
        // Ưu tiên lấy bài chính
        let data = await getAboutData();
        if (!data) {
          // Nếu không có bài chính, thử lấy bản nháp
          try {
            data = await getDraft();
          } catch (err) {
            if (err.response?.status !== 404) {
              console.warn("❌ Không tải được bản nháp:", err.message);
            }
            data = null; // Nếu không có bản nháp, giữ form trống
          }
        }
        if (data) {
          setForm({
            _id: data._id || null,
            title: data.title || { vi: "", jp: "" },
            excerpt: data.excerpt || { vi: "", jp: "" },
            image: data.image || "",
            content: {
              vi: data.content?.vi || { type: "doc", content: [] },
              jp: data.content?.jp || { type: "doc", content: [] },
            },
            isDraft: data.isDraft || false,
          });
          if (editorVi) {
            editorVi.commands.setContent(
              data.content?.vi || { type: "doc", content: [] }
            );
          }
          if (editorJp) {
            editorJp.commands.setContent(
              data.content?.jp || { type: "doc", content: [] }
            );
          }
        }
      } catch (err) {
        console.error("Lỗi khi lấy dữ liệu:", err.message);
        alert((t.error || "Lỗi: ") + err.message);
      } finally {
        setFetching(false);
      }
    };
    fetch();
  }, [editorVi, editorJp]);

  // Theo dõi thay đổi trong form để lưu bản nháp tự động
  useEffect(() => {
    if (
      (form.title.vi ||
        form.title.jp ||
        form.excerpt.vi ||
        form.excerpt.jp ||
        form.image ||
        form.content.vi.content.length > 0 ||
        form.content.jp.content.length > 0) &&
      !saving
    ) {
      debouncedSaveDraft(form);
    }
  }, [form, saving]);

  const handleFieldChange = (field, lang, value) => {
    setForm((prev) => ({
      ...prev,
      [field]: { ...prev[field], [lang]: value },
    }));
  };

  const handleChange = (field, value) => {
    setForm((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    if (!form.title.vi || !form.excerpt.vi || !form.content.vi) {
      alert(
        t.requiredFields ||
          "Vui lòng điền tiêu đề, tóm tắt và nội dung tiếng Việt."
      );
      return;
    }
    setSaving(true);
    try {
      await updateAboutData({ ...form, isDraft: false });
      alert(t.saved || "Lưu thành công");
      router.push("/admin");
    } catch (err) {
      alert((t.error || "Lỗi: ") + err.message);
    } finally {
      setSaving(false);
    }
  };

  const handleDrop = async (e) => {
    e.preventDefault();
    e.stopPropagation();
    const files = Array.from(e.dataTransfer?.files || []);
    if (!files.length) {
      alert(t.noFile || "Không có file được chọn.");
      return;
    }

    const validTypes = [
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    ];
    const maxSize = 10 * 1024 * 1024; // 10MB

    const targetClass = e.currentTarget?.className || "";
    const isJp = targetClass.includes("tiptap-jp");
    const isVi = targetClass.includes("tiptap-vi");
    const editor = isJp ? editorJp : isVi ? editorVi : null;

    if (!editor) {
      alert(t.invalidEditor || "Không xác định được vùng biên tập.");
      return;
    }

    try {
      for (const file of files) {
        if (!validTypes.includes(file.type)) {
          alert(t.invalidFileType || `File ${file.name} không được hỗ trợ.`);
          continue;
        }
        if (file.size > maxSize) {
          alert(t.fileTooLarge || `File ${file.name} quá lớn, tối đa 10MB.`);
          continue;
        }

        const ext = file.name.split(".").pop().toLowerCase();
        let content = "";
        if (ext === "docx") {
          content = await extractDocxContent(file);
        }

        if (content) {
          editor.commands.insertContent(content);
        } else {
          alert(t.fileReadError || `Không thể đọc nội dung từ ${file.name}.`);
        }
      }
    } catch (err) {
      console.error("Lỗi trong handleDrop:", err);
      alert(t.fileReadError || `Lỗi khi xử lý file: ${err.message}`);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.currentTarget.classList.add("border-blue-400", "bg-blue-50");
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    e.currentTarget.classList.remove("border-blue-400", "bg-blue-50");
  };

  const extractDocxContent = async (file) => {
    const arrayBuffer = await file.arrayBuffer();
    const result = await mammoth.convertToHtml({
      arrayBuffer,
      convertImage: (element) => {
        return new Promise((resolve) => {
          const reader = new FileReader();
          reader.onload = (e) => {
            const base64Image = e.target.result;
            resolve({
              src: base64Image,
              alt: element.alt || "Hình ảnh từ Word",
            });
          };
          reader.readAsDataURL(element.content);
        });
      },
    });
    return result.value || "<p>Nội dung trống</p>";
  };

  if (loading || fetching)
    return <p className="text-center mt-10">{t.loading || "Đang tải..."}</p>;
  if (!user || user.role !== "admin")
    return (
      <p className="text-center mt-10 text-red-600">
        {t.noAccess || "Bạn không có quyền truy cập."}
      </p>
    );

  return (
    <div className="max-w-5xl mx-auto px-6 py-12 space-y-8">
      <h1 className="text-3xl font-bold text-[#cfac1e] text-center">
        {t.editTitle || "Chỉnh sửa trang Giới thiệu"}
      </h1>

      {/* Tiêu đề & Tóm tắt */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 bg-white shadow-lg p-6 rounded-xl border">
        <div>
          <label className="block font-medium text-gray-700 mb-2">
            {t.placeholderTitle || "Tiêu đề (Tiếng Việt)"}
          </label>
          <TextareaAutosize
            className="w-full p-3 bg-gray-50 border border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 hover:bg-gray-100 transition-all duration-200 text-gray-800 placeholder-gray-400"
            minRows={1}
            value={form.title.vi}
            onChange={(e) => handleFieldChange("title", "vi", e.target.value)}
            placeholder="Nhập tiêu đề tiếng Việt"
          />
        </div>
        <div>
          <label className="block font-medium text-gray-700 mb-2">
            {t.placeholderTitle_1 || "Tiêu đề (Tiếng Nhật)"}
          </label>
          <TextareaAutosize
            className="w-full p-3 bg-gray-50 border border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 hover:bg-gray-100 transition-all duration-200 text-gray-800 placeholder-gray-400"
            minRows={1}
            value={form.title.jp}
            onChange={(e) => handleFieldChange("title", "jp", e.target.value)}
            placeholder="Nhập tiêu đề tiếng Nhật"
          />
        </div>
        <div>
          <label className="block font-medium text-gray-700 mb-2">
            {t.placeholderExcerpt || "Tóm tắt (Tiếng Việt)"}
          </label>
          <TextareaAutosize
            minRows={3}
            value={form.excerpt.vi}
            onChange={(e) => handleFieldChange("excerpt", "vi", e.target.value)}
            className="w-full p-3 bg-gray-50 border border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 hover:bg-gray-100 transition-all duration-200 text-gray-800 placeholder-gray-400"
            placeholder="Nhập tóm tắt tiếng Việt"
          />
        </div>
        <div>
          <label className="block font-medium text-gray-700 mb-2">
            {t.placeholderExcerpt_1 || "Tóm tắt (Tiếng Nhật)"}
          </label>
          <TextareaAutosize
            minRows={3}
            value={form.excerpt.jp}
            onChange={(e) => handleFieldChange("excerpt", "jp", e.target.value)}
            className="w-full p-3 bg-gray-50 border border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 hover:bg-gray-100 transition-all duration-200 text-gray-800 placeholder-gray-400"
            placeholder="Nhập tóm tắt tiếng Nhật"
          />
        </div>
      </div>

      {/* Hình ảnh chính */}
      <div className="bg-white shadow-lg p-6 rounded-xl border space-y-3">
        <label className="block font-medium text-gray-700">
          {t.placeholderImage || "URL hình ảnh"}
        </label>
        <input
          className="w-full p-3 bg-gray-50 border border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 hover:bg-gray-100 transition-all duration-200 text-gray-800 placeholder-gray-400"
          value={form.image}
          onChange={(e) => handleChange("image", e.target.value)}
          placeholder="Nhập URL ảnh"
        />
        {form.image && (
          <img
            src={form.image}
            alt="Cover"
            className="mt-2 rounded-lg border max-w-sm shadow"
          />
        )}
      </div>

      {/* Nội dung */}
      <div className="space-y-6">
        <h2 className="text-xl font-semibold text-gray-800">
          {t.contentHeading || "Nội dung"}
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div
            className="relative rounded-xl border border-gray-200 p-5 bg-white shadow-sm hover:shadow-md transition-all"
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
          >
            <label className="block mb-3 text-base font-semibold text-gray-800">
              {t.sectionContent || "Nội dung (Tiếng Việt)"}
            </label>
            <EditorToolbar editor={editorVi} />
            <EditorContent
              editor={editorVi}
              onDrop={handleDrop}
              className="tiptap tiptap-vi w-full rounded-lg min-h-[200px] bg-gray-50 p-4 text-sm text-gray-800 outline-none transition-all duration-200 focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2"
            />
            {!form.content.vi.content.length && (
              <div className="absolute inset-0 flex items-center justify-center text-gray-400 pointer-events-none">
                {t.dropFiles || "Kéo và thả file Word vào đây"}
              </div>
            )}
          </div>
          <div
            className="relative rounded-xl border border-gray-200 p-5 bg-white shadow-sm hover:shadow-md transition-all"
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
          >
            <label className="block mb-3 text-base font-semibold text-gray-800">
              {t.sectionContent_1 || "Nội dung (Tiếng Nhật)"}
            </label>
            <EditorToolbar editor={editorJp} />
            <EditorContent
              editor={editorJp}
              onDrop={handleDrop}
              className="tiptap tiptap-jp w-full rounded-lg min-h-[200px] bg-gray-50 p-4 text-sm text-gray-800 outline-none transition-all duration-200 focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2"
            />
            {!form.content.jp.content.length && (
              <div className="absolute inset-0 flex items-center justify-center text-gray-400 pointer-events-none">
                {t.dropFiles || "Kéo và thả file Word vào đây"}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Nút Lưu */}
      <div className="text-right pt-4">
        <button
          onClick={handleSave}
          disabled={saving || isDraftSaving}
          className={`px-6 py-2 rounded-lg font-semibold text-white transition-all duration-200 shadow-md ${
            saving || isDraftSaving
              ? "bg-gray-400 cursor-not-allowed"
              : "bg-[#cfac1e] hover:bg-[#b89514]"
          }`}
        >
          {saving || isDraftSaving
            ? t.saving || "Đang lưu..."
            : t.save || "Lưu"}
        </button>
      </div>
    </div>
  );
}
